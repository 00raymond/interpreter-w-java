memory allocation

register allocation
- "most important thing compiler does, definitely most time consuming"
2/3rd time of compiler spent in register allocation

before ssa:
- original C has keyword register to tell compiler to use a particular register

old style:
- variable corresponds to memory location for register

||
\/

ssa style:
- unique value corresponds to a memory location or register
- compiling to ssa, compiling to a machine with an infinite register set
- using same storage location for different values that don't coexist in time
- take all SSA values and compact them. "we have infinite/unbound set of registers, but first n
- are real registers and next will be held in level 1 cache, then level 2, then etc. until slow memory"
- "live range" of a value: time a value lives, temporal, also spatial.
    - starts with definition
    - use of the value
    - last use of the value

    - in ssa, every value has only 1 definition
- "interference" exists when :
    - first value is alive when second is created,  or first is created when second is alive.
- "interference graph":
    - edges exist between nodes which have an interference (a) --- (b) when a is alive when b is created

graph coloring:
    -

compiling for example:

a <- InputNum();
b <- InputNum();
OutputNum((a*b) + (a*7));

-1 : const # 7
     live range   1  2  3  4  5
1: read() --------0------------
2: read() --------|<>0---------    // at most we will need 2 registers at once
3: mul(1)(2) -----o<-o->0------    //  (1) ---- (2)       (1) ---- (3)    ==>        (1)--(2)
4: mul(1)(-1) ----o-----|<>0---    //  (3) ---- (4)                                   |
5: add(3)(4) -----------o--o--0    //                                                (3)--(4)   (5)

question: how to figure out which registers to use based on the interference graph?

"interference"
creation of a value while another is alive
<> in table indicate interference. if ends while creates, is NOT an interference

1: Read -> R2
2: Read -> R1
3: mul R2 * R1 -> R1
4: mul R2 * 7 -> R2
5: add R1 + R2 -> R1
6: write R1

calculate live range from the bottom
- nothing is alive at the bottom, need to see the last use of a value. then we can check for its creation
- when a value is used, it must be alive, add it to the set of live values
- when a value is created, it must be alive, remove it from the set of live values

based on LAST USE of a value, we can determine the live ranges of values for specific points in ssa instructions
{}
1: read()
{1}
2: read()
{1,2}
3: mul(1)(2)
{1,3}
4: mul(1)(-1)
{3,4}
5: add(3)(4)
{5}
6: write(5)
{}

- we can see that at most 2 registers are needed at once
question: why is interference graph necessary?
visiting 2 while 1 is in the set, thus edge between 1 and 2.
everything alive while a value is being created will have an edge with the created value.

algorithm for building interference graph:
    - within basic blocks
       - go backwards from end to entry
       <-
        i : op x y 1) remove i from live-set 2) add an edge (i) <-> j for every j left in live-set (3) add {x}, {y} to live set
       <-
        live-set_0

    - sparse matrices instead of hash maps for efficient compiling

    - for more complex control flow,

interference graph shows coexistence and shows that certain values can use the same register if they dont share an edge
coloring graphs happens after interference graph is built

- add in contraints of phi functions after interfence graph is built
- use graph coloring algorithm

void Color(graph G) {
    N colors
    x <- any node with < N neighbors
    remove x from G
    Color(remaining graph);
    add x and its edges back;
    x gets a color different from its neighbors
}

- if a node has more than N neighbors, we can spill it to memory
- values need to be "spilled"
- spill code is inserted to move values to memory
cost function:
- cost of spilling a value to memory
- cost determined by how many uses of the value are in the future
- cost of spilling a value is the number of uses of the value in the future

cost function:
 number of accesses scaled by loop nesting depth

 cost function for register allocator is typically confidential
 considered "magic " formula, as its where competitive advantage lies

 how to modify the graph coloring algorithm to take into account the cost function?
    - modify the algorithm to take into account the cost function removing the node with the lowest cost